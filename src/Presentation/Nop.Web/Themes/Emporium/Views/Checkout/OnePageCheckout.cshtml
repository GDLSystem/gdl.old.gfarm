@model OnePageCheckoutModel
@using Nop.Core
@using Nop.Services.Customers
@inject IWebHelper webHelper
@inject IWorkContext workContext
@inject ICustomerService _customerService
@{
    Layout = "_ColumnsOne";

    var storeLocation = webHelper.GetStoreLocation();

    //title
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
    //page class
    Html.AppendPageCssClassParts("html-checkout-page");
}
<div class="page shopping-cart-page">

    <div class="page-title">
        <h1>@T("ShoppingCart")</h1>
    </div>
    <div class="page-body">
        <form asp-action="Cart" asp-controller="Checkout">
            <div class="opc-checkout-discount">
                @if (Model.ShoppingCart.IsEditable)
                {
                    <div class="cart-collaterals">
                        @if (Model.ShoppingCart.DiscountBox.Display || Model.ShoppingCart.GiftCardBox.Display)
                        {
                            <div class="deals">
                                <div class="title">@T("ShoppingCart.DiscountAndVouchers")</div>
                                <div class="list">
                                    @await Html.PartialAsync("_DiscountBox", Model.ShoppingCart.DiscountBox)
                                    @await Html.PartialAsync("_GiftCardBox", Model.ShoppingCart.GiftCardBox)
                                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentDeals })
                                </div>
                            </div>
                            @await Component.InvokeAsync("ShoppingCartEstimateShipping")
                        }
                    </div>
                }
            </div>
        </form>
        <form asp-action="OpcConfirmOrderCustom" method="post" enctype="multipart/form-data" id="shopping-cart-form">

            <div class="opc-billing-addresses">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutBillingAddressTop })

                <div class="section select-billing-address">
                    <div class="title">
                        <h1>@T("Checkout.CustomerCheckoutInfo")</h1>
                    </div>
                    @* @if (Model.BillingAddress.InvalidExistingAddresses.Count > 0) *@
                    @* { *@
                    @*     <div class="min-amount-warning"> *@
                    @*         <span>@string.Format(T("Checkout.Addresses.Invalid").Text, Model.BillingAddress.InvalidExistingAddresses.Count)</span> *@
                    @*     </div> *@
                    @* } *@
                    <div class="opc-address-grid">

                        <div class="opc-add-button">
                            <div asp-validation-summary="ModelOnly" class="message-error"></div>
                            <div class="enter-address">
                                @{
                                    var dataDictAddress = new ViewDataDictionary(ViewData);
                                    dataDictAddress.TemplateInfo.HtmlFieldPrefix = "BillingNewAddress";
                                    @await Html.PartialAsync("_OnePageCheckoutAddress", Model.BillingAddress.BillingNewAddress, dataDictAddress)
                                }
                            </div>
                        </div>
                    </div>
                </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutBillingAddressMiddle })

                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutBillingAddressBottom })
            </div>
            <div class="opc-order-summary">
                <div class="notification-board-covid">
                    @T("Warning.Covid19")
                </div>
                <div class="payment-info">
                    <div class="section payment-info">
                        <div class="title">
                            <h1>@T("Checkout.SelectPaymentMethod")</h1>
                        </div>
                        <div class="info">
                            @* @await Component.InvokeAsync(Model.CheckoutPaymentInfo.PaymentViewComponentName) *@
                            @if (Model.PaymentMethods.Count > 0)
                            {
                                <ul class="method-list" id="payment-method-block">
                                    @for (var i = 0; i < Model.PaymentMethods.Count; i++)
                                    {
                                        var paymentMethod = Model.PaymentMethods[i];
                                        var paymentMethodName = paymentMethod.Name;
                                        if (!string.IsNullOrEmpty(paymentMethod.Fee))
                                        {
                                            paymentMethodName = T("Checkout.SelectPaymentMethod.MethodAndFee", paymentMethodName, paymentMethod.Fee).Text;
                                        }
                                        <li>
                                            <div class="method-name">
                                                @if (!string.IsNullOrEmpty(paymentMethod.LogoUrl))
                                                {
                                                    <div class="payment-logo">
                                                        <label for="paymentmethod_@(i)">
                                                            <img src="@paymentMethod.LogoUrl" alt="@paymentMethodName"/>
                                                        </label>
                                                    </div>
                                                }
                                                <div class="payment-details">
                                                    <input id="paymentmethod_@(i)" type="radio" name="PaymentMethod" value="@(paymentMethod.PaymentMethodSystemName)" checked="@paymentMethod.Selected"/>
                                                    <label for="paymentmethod_@(i)">@paymentMethodName</label>
                                                    @if (!string.IsNullOrEmpty(paymentMethod.Description))
                                                    {
                                                        <div class="payment-description">@paymentMethod.Description</div>
                                                    }
                                                </div>
                                            </div>
                                        </li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <div class="message-error">
                                    @T("Checkout.NoPaymentMethods")
                                </div>
                            }
                        </div>
                    </div>
                </div>

                @await Html.PartialAsync("_OrderSummary", Model.ShoppingCart)
            </div>
        </form>
    </div>
</div>